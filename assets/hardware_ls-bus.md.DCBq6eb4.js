import{_ as e,c as a,a1 as n,o}from"./chunks/framework.BDxlaA_J.js";const u=JSON.parse('{"title":"LS.bus CAN communication interface","description":"","frontmatter":{},"headers":[],"relativePath":"hardware/ls-bus.md","filePath":"hardware/ls-bus.md","lastUpdated":1752654879000}'),i={name:"hardware/ls-bus.md"};function r(s,t,d,c,p,l){return o(),a("div",null,t[0]||(t[0]=[n('<h1 id="ls-bus-can-communication-interface" tabindex="-1">LS.bus CAN communication interface <a class="header-anchor" href="#ls-bus-can-communication-interface" aria-label="Permalink to &quot;LS.bus CAN communication interface&quot;">​</a></h1><p>In contrast to the more simple LS.one interface, the LS.bus interface is based on CAN to allow connection of multiple devices. The main advantage of CAN compared to other low-level communication buses is that it allows master-less operation, i.e. each device can start communicating with other devices. The idea is to develop a plug &amp; play communication method for energy systems with a completely open source specification.</p><h2 id="connector-and-pinout" tabindex="-1">Connector and pinout <a class="header-anchor" href="#connector-and-pinout" aria-label="Permalink to &quot;Connector and pinout&quot;">​</a></h2><p>The connector is a standard RJ45 jack as used for Ethernet. Also the same wires (Cat. 5e twisted pair or better) are used, allowing reliable communication with easily available parts.</p><p>The pinout of the connector is similar to the CANopen specification:</p><table tabindex="0"><thead><tr><th>Pin #</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>CAN_H</td><td>CAN bus high signal</td></tr><tr><td>2</td><td>CAN_L</td><td>CAN bus low signal</td></tr><tr><td>3</td><td>GND</td><td>CAN and power supply GND (optional)</td></tr><tr><td>4</td><td>V+</td><td>Bus power supply (optional, 12-24V nominal)</td></tr><tr><td>5</td><td>V+</td><td>Bus power supply (optional, 12-24V nominal)</td></tr><tr><td>6</td><td>-</td><td>reserved (do not connect)</td></tr><tr><td>7</td><td>GND</td><td>CAN and power supply GND (optional)</td></tr><tr><td>8</td><td>(V+)</td><td>Unconnected by default, optional jumper to V+</td></tr></tbody></table><p>The pinout specification aims to create as little interference with existing standards as possible. Most important, any damage must be prevented if a LS.bus device is accidentally connected to a standard Ethernet jack.</p><p>In contrast to the CANopen specification, pin 8 is not used as the bus power supply (V+) by default. 10/100 MBit Ethernet jacks with integrated magnetics (e.g. <a href="https://katalog.we-online.de/pbs/download/Tutorials_Connecting+LAN+Transformers_EN+%28rev1%29.pdf" target="_blank" rel="noreferrer">these ones</a>) internally connect pin 4 to 5 and pin 7 to 8. In addition to that, Power over Ethernet (PoE) uses pins 4+5 for positive power rail and pins 7+8 for GND. So it&#39;s not ideal to use pin 7 as GND and pin 8 as V+. Boards can however offer a jumper to connect pin 8 with the other V+ pins (4 and 5) for bus supply of CANopen devices.</p><p>Galvanic isolation is currently not considered mandatory, as long as all devices are connected via thick wires. This might change in the future.</p><p>One device typically has 2 RJ45 jacks for daisy-chaining the devices and maintaining the bus topology. There is no such thing like a switch needed. However, the endpoints have to be terminated with termination plugs or resistors.</p><p>A device that supplies power to V+ may not hard-connect the daisy-chained wires without any fuses in order to ensure that the current rating per wire is not exceeded. Devices without power supply may just route through the powered wires.</p><p>The maximum current per wire pair is 600 mA (300 mA per wire), same as PoE+ (IEEE 802.3at Type 2) with CAT5e cables.</p><h2 id="development-status" tabindex="-1">Development status <a class="header-anchor" href="#development-status" aria-label="Permalink to &quot;Development status&quot;">​</a></h2><p>The protocol for messages sent over CAN is not yet fully specified. It will be based on the <a href="https://thingset.io/" target="_blank" rel="noreferrer">ThingSet</a> binary protocol.</p>',14)]))}const m=e(i,[["render",r]]);export{u as __pageData,m as default};
