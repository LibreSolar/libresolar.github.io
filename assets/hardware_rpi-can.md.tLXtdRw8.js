import{_ as r,c as a,a1 as t,o as i}from"./chunks/framework.BDxlaA_J.js";const o="/assets/rpi-can-gw.DCJ4IBVl.png",u=JSON.parse('{"title":"CAN interface for Raspberry Pi (Zero W)","description":"","frontmatter":{},"headers":[],"relativePath":"hardware/rpi-can.md","filePath":"hardware/rpi-can.md","lastUpdated":1752654879000}'),n={name:"hardware/rpi-can.md"};function s(l,e,p,c,d,f){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="can-interface-for-raspberry-pi-zero-w" tabindex="-1">CAN interface for Raspberry Pi (Zero W) <a class="header-anchor" href="#can-interface-for-raspberry-pi-zero-w" aria-label="Permalink to &quot;CAN interface for Raspberry Pi (Zero W)&quot;">​</a></h1><p><img src="https://img.shields.io/badge/development%20stage-release%20candidate-yellow.svg" alt="Development Stage"> Tested prototype, only minor issues left.</p><p>This interface PCB allows to read data from the CAN bus connecting the Libre Solar components. So the Raspberry Pi can be used as a gateway to IoT applications and energy monitoring (e.g. using Open Energy Monitor).</p><p>The pin header is compatible with all Raspberry Pi models, but the size is especially suited for the Raspberry Pi Zero W.</p><p><img src="'+o+'" alt="Raspberry Pi CAN interface PCB"></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>CAN interface via SPI using MCP2515 controller and TJA1042T/3 transceiver</li><li>Power supply of Raspberry Pi via bus connector (RJ45)</li><li>CAN transceiver standby connected to GPIO 24 (low power consumption mode possible)</li><li>LED on GPIO 22 for custom status information</li></ul><h2 id="further-information" tabindex="-1">Further information <a class="header-anchor" href="#further-information" aria-label="Permalink to &quot;Further information&quot;">​</a></h2><p>Visit the <a href="https://github.com/LibreSolar/CAN_RPi-ZeroW" title="Libre Solar CAN interface for Raspberry Pi (Zero W)" target="_blank" rel="noreferrer">GitHub page</a> for useage instructions, schematics and board layout.</p>',9)]))}const m=r(n,[["render",s]]);export{u as __pageData,m as default};
